{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","gifExpertApp.js","index.js"],"names":["AddCategory","setTags","useState","value","setValue","onSubmit","e","preventDefault","trim","length","tags","type","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","App","t","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAGaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACtBR,GAAQ,SAACS,GAAD,OAAWP,GAAX,mBAAqBO,OAC7BN,EAAS,MAKb,SACI,uBAAOO,KAAK,OAAOR,MAAOA,EAAOS,SAff,SAACN,GACvBF,EAASE,EAAEO,OAAOV,a,uBCPbW,EAAO,uCAAG,WAAOJ,GAAP,uBAAAK,EAAA,6DACbC,EADa,iDACmCC,UAClDP,GAFe,8DAIAQ,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAMD,EAAKE,KAAI,SAACC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBb,EAAqB,EAArBA,IAAYS,GAAS,EAAhBC,MAAgB,EAATD,IAGtC,OACI,mCACI,qBACIK,UAAU,mEACVC,IAAKf,EACLgB,IAAKP,OCNRQ,EAAU,SAAC,GAAc,IAAZvB,EAAW,EAAXA,KACtB,ECFwB,SAACA,GACzB,MAA0BR,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNvB,EAAQJ,GAAM4B,MAAK,SAACC,GAChBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACxB,IAEGyB,EDbUK,CAAa9B,GAAtBW,EAAR,EAAQA,KAER,OACI,qCACI,6BAAKX,IAEJW,EAAKE,KAAI,YAAyB,IAAtBE,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACpB,OAAO,cAAC,EAAD,CAAsBA,IAAKA,EAAKU,MAAOA,GAArBD,UEF1B,SAASgB,IACpB,MAAwBvC,mBAAS,IAAjC,mBAAOQ,EAAP,KAAaT,EAAb,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,QAASA,IACtB,uBAEA,6BACKS,EAAKa,KAAI,SAACmB,GAAD,OACN,cAAC,EAAD,CAAiBhC,KAAMgC,GAATA,W,MChBlCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACJ,EAAD,MAEJK,SAASC,eAAe,W","file":"static/js/main.513c6580.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setTags }) => {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const handleValueChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (value.trim().length > 2) {\r\n            setTags((tags) => [value, ...tags]);\r\n            setValue(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={value} onChange={handleValueChange} />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setTags: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (tags) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        tags\r\n    )}&limit=6&api_key=wYSQ9FXFZIjyOfD57moAlX5dTOuMLzsQ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gif = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gif;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ url, title, id }) => {\r\n    //En los parametros lo vuelvo a desestructurar.\r\n\r\n    return (\r\n        <>\r\n            <img\r\n                className=\"GifGrid animate__animated animate__bounce animate__bounceInRight\"\r\n                src={url}\r\n                alt={id}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ tags }) => {\r\n    const { data } = useFetchGifs(tags);\r\n\r\n    return (\r\n        <>\r\n            <h3>{tags}</h3>\r\n\r\n            {data.map(({ id, title, url }) => {\r\n                return <GifGridItem key={id} url={url} title={title} />;\r\n            })}\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (tags) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(tags).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [tags]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n/*\r\nconst apiKey = \"wYSQ9FXFZIjyOfD57moAlX5dTOuMLzsQ\";\r\nconst peticion = fetch(\r\n    `https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`\r\n);\r\n*/\r\n\r\nexport default function App() {\r\n    const [tags, setTags] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setTags={setTags} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {tags.map((t) => (\r\n                    <GifGrid key={t} tags={t} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./gifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}